output ["len = "++format(len)++";\n","legs = "++_toString_LEGS(legs,false)++";\n","arms = "++_toString_ARMS(arms,false)++";\n","face = "++_toString_FACE(face,false)++";\n","obj = "++format(obj)++";"];
function string : _toString_FACE(array [$U] of opt FACE: x,bool: b) = let {array [int] of opt FACE: xx = array1d(x)} in (("["++join(", ",[_toString_FACE(xx[i],b) | i in index_set(xx), ]))++"]");
function string : _toString_FACE(opt int: x,bool: b) = if occurs(x) then _enum_to_string_FACE[deopt(x)] else "<>" endif;
function string : _toString_ARMS(array [$U] of opt ARMS: x,bool: b) = let {array [int] of opt ARMS: xx = array1d(x)} in (("["++join(", ",[_toString_ARMS(xx[i],b) | i in index_set(xx), ]))++"]");
function string : _toString_ARMS(opt int: x,bool: b) = if occurs(x) then _enum_to_string_ARMS[deopt(x)] else "<>" endif;
function string : _toString_LEGS(array [$U] of opt LEGS: x,bool: b) = let {array [int] of opt LEGS: xx = array1d(x)} in (("["++join(", ",[_toString_LEGS(xx[i],b) | i in index_set(xx), ]))++"]");
function string : _toString_LEGS(opt int: x,bool: b) = if occurs(x) then _enum_to_string_LEGS[deopt(x)] else "<>" endif;
set of int: LEGS = 1..6;
set of int: ARMS = 1..5;
set of int: FACE = 1..6;
set of int: STEP = 1..20;
int: len;
array [STEP] of int: legs;
array [STEP] of int: arms;
array [STEP] of int: face;
int: obj;
array [1..6] of string: _enum_to_string_LEGS = ["spin","leap","waltz","curtsey","prep","stand"];
array [1..5] of string: _enum_to_string_ARMS = ["beckon","out","up","wrapped","neutral"];
array [1..6] of string: _enum_to_string_FACE = ["smile","wink","batt","think","glow","blank"];
